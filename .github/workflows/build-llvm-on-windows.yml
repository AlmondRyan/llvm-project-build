name: Build LLVM for Windows (Cross-Compile on Ubuntu)

on: [workflow_dispatch]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 检出代码及其子模块
      - uses: actions/checkout@v4
        with:
          submodules: true

      # 安装依赖项
      - name: Install Dependencies
        run: |
          sudo apt update
          sudo apt install -y \
            build-essential \
            cmake \
            ninja-build \
            python3 \
            mingw-w64 \
            gcc-mingw-w64 \
            g++-mingw-w64

      # 创建构建目录并配置 CMake
      - name: Configure and Build LLVM (Cross-Compile)
        shell: bash
        run: |
          mkdir build
          cd build
          cmake -G Ninja ../llvm \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_SYSTEM_NAME=Windows \
            -DCMAKE_C_COMPILER=x86_64-w64-mingw32-gcc \
            -DCMAKE_CXX_COMPILER=x86_64-w64-mingw32-g++ \
            -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra;compiler-rt;lld;mlir;openmp;polly;pstl" \
            -DLLVM_TARGETS_TO_BUILD="X86" \
            -DLLVM_INSTALL_UTILS=ON \
            -DLLVM_BUILD_TOOLS=ON \
            -DLLVM_BUILD_UTILS=ON \
            -DLLVM_BUILD_TESTS=OFF \
            -DLLVM_INCLUDE_TESTS=OFF \
            -DLLVM_ENABLE_ASSERTIONS=OFF \
            -DCOMPILER_RT_BUILD_SANITIZERS=OFF \
            -DLLVM_ENABLE_THREADS=OFF \
            -DLLVM_DEFAULT_TARGET_TRIPLE=x86_64-pc-windows-gnu
          ninja

      # 打包生成的工具链
      - name: Package Build Artifacts
        run: |
          cd build
          tar -czf llvm-windows-full.tar.gz bin/ lib/ include/ share/

      # 上传生成的工具链
      - name: Upload Full Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: llvm-windows-full
          path: build/llvm-windows-full.tar.gz
